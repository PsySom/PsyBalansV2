import React, { useState } from 'react';
import {
  Box,
  Container,
  Heading,
  Text,
  VStack,
  HStack,
  SimpleGrid,
  Flex,
  Switch,
  Icon,
  useColorModeValue,
  Spinner,
  Badge,
  useBreakpointValue
} from '@chakra-ui/react';
import { keyframes } from '@emotion/react';

// –ê–Ω–∏–º–∞—Ü–∏—è –ø—É–ª—å—Å–∞—Ü–∏–∏
const pulseAnimation = keyframes`
  0% { opacity: 0.6; transform: scale(0.98); }
  50% { opacity: 1; transform: scale(1); }
  100% { opacity: 0.6; transform: scale(0.98); }
`;

// –ö–æ–º–ø–æ–Ω–µ–Ω—Ç —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ–≥–æ –±–ª–æ–∫–∞
interface FeatureBlockProps {
  icon: string;
  title: string;
  description: string;
}

const FeatureBlock: React.FC<FeatureBlockProps> = ({ icon, title, description }) => {
  const bgColor = useColorModeValue('white', 'gray.800');
  const borderColor = useColorModeValue('gray.100', 'gray.700');
  
  return (
    <Box
      p={5}
      bg={bgColor}
      borderRadius="lg"
      boxShadow="md"
      border="1px solid"
      borderColor={borderColor}
      transition="all 0.3s ease"
      _hover={{ transform: 'translateY(-5px)', boxShadow: 'lg' }}
    >
      <Flex direction="column" align="flex-start">
        <Box fontSize="2xl" mb={3}>{icon}</Box>
        <Heading as="h3" size="md" mb={2}>{title}</Heading>
        <Text fontSize="sm">{description}</Text>
      </Flex>
    </Box>
  );
};

// –ö–æ–º–ø–æ–Ω–µ–Ω—Ç –≤–µ—Ä—Å–∏–∏ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è (–≤–µ–±/–º–æ–±–∏–ª—å–Ω–∞—è)
interface VersionComparisonProps {
  title: string;
  icon: string;
  benefits: string[];
}

const VersionComparison: React.FC<VersionComparisonProps> = ({ title, icon, benefits }) => {
  const bgColor = useColorModeValue('gray.50', 'gray.800');
  const borderColor = useColorModeValue('gray.200', 'gray.700');
  
  return (
    <Box
      p={5}
      bg={bgColor}
      borderRadius="lg"
      boxShadow="sm"
      border="1px solid"
      borderColor={borderColor}
    >
      <Flex align="center" mb={3}>
        <Box fontSize="2xl" mr={2}>{icon}</Box>
        <Heading as="h3" size="md">{title}</Heading>
      </Flex>
      
      <VStack align="start" spacing={2}>
        {benefits.map((benefit, index) => (
          <Flex key={index} align="center">
            <Box as="span" mr={2} color="green.500">‚úì</Box>
            <Text fontSize="sm">{benefit}</Text>
          </Flex>
        ))}
      </VStack>
    </Box>
  );
};

// –û—Å–Ω–æ–≤–Ω–æ–π –∫–æ–º–ø–æ–Ω–µ–Ω—Ç –ø—Ä–µ–≤—å—é –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
const AppPreview: React.FC = () => {
  const [isMobile, setIsMobile] = useState(false);
  const headingSize = useBreakpointValue({ base: "xl", md: "2xl" });
  const containerWidth = useBreakpointValue({ base: "100%", md: "90%", lg: "80%" });
  
  // –¶–≤–µ—Ç–∞ –¥–ª—è —Å—Ç–∏–ª–∏–∑–∞—Ü–∏–∏
  const glassBg = useColorModeValue('rgba(255, 255, 255, 0.8)', 'rgba(26, 32, 44, 0.8)');
  const borderColor = useColorModeValue('gray.200', 'gray.700');
  const gradientStart = useColorModeValue('blue.50', 'blue.900');
  const gradientEnd = useColorModeValue('purple.50', 'purple.900');
  
  // –†–∞–∑–º–µ—Ä—ã –¥–ª—è –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞ –ø—Ä–µ–≤—å—é
  const previewWidth = isMobile ? { base: "280px", md: "320px" } : { base: "100%", md: "800px" };
  const previewHeight = isMobile ? { base: "500px", md: "600px" } : { base: "400px", md: "600px" };
  
  // –î–∞–Ω–Ω—ã–µ –æ —Ñ—É–Ω–∫—Ü–∏—è—Ö
  const features = [
    {
      icon: "üìä",
      title: "–ê–Ω–∞–ª–∏—Ç–∏–∫–∞ –ø–æ—Ç—Ä–µ–±–Ω–æ—Å—Ç–µ–π",
      description: "–û—Ç—Å–ª–µ–∂–∏–≤–∞–π—Ç–µ –∏ –∞–Ω–∞–ª–∏–∑–∏—Ä—É–π—Ç–µ —Å–≤–æ–∏ –ø—Å–∏—Ö–æ–ª–æ–≥–∏—á–µ—Å–∫–∏–µ –ø–æ—Ç—Ä–µ–±–Ω–æ—Å—Ç–∏ –≤ –¥–∏–Ω–∞–º–∏–∫–µ –¥–ª—è –ª—É—á—à–µ–≥–æ –ø–æ–Ω–∏–º–∞–Ω–∏—è —Å–µ–±—è."
    },
    {
      icon: "üìù",
      title: "–£–º–Ω—ã–µ –¥–Ω–µ–≤–Ω–∏–∫–∏",
      description: "–°—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –¥–Ω–µ–≤–Ω–∏–∫–∏ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏—è –∏ –º—ã—Å–ª–µ–π —Å –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–º –∞–Ω–∞–ª–∏–∑–æ–º –ø–∞—Ç—Ç–µ—Ä–Ω–æ–≤ –∏ —Ç—Ä–∏–≥–≥–µ—Ä–æ–≤."
    },
    {
      icon: "üéØ",
      title: "–ü–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏",
      description: "–ü–æ–ª—É—á–∞–π—Ç–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—è–º, –∞–¥–∞–ø—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –ø–æ–¥ –≤–∞—à–∏ —É–Ω–∏–∫–∞–ª—å–Ω—ã–µ –ø–æ—Ç—Ä–µ–±–Ω–æ—Å—Ç–∏ –∏ –ø—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏—è."
    },
    {
      icon: "üß†",
      title: "–£–ø—Ä–∞–∂–Ω–µ–Ω–∏—è –æ—Å–æ–∑–Ω–∞–Ω–Ω–æ—Å—Ç–∏",
      description: "–ë–∏–±–ª–∏–æ—Ç–µ–∫–∞ —É–ø—Ä–∞–∂–Ω–µ–Ω–∏–π –¥–ª—è —Ä–∞–∑–≤–∏—Ç–∏—è –≤–Ω–∏–º–∞—Ç–µ–ª—å–Ω–æ—Å—Ç–∏, —ç–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω–æ–π —Ä–µ–≥—É–ª—è—Ü–∏–∏ –∏ –ø—Å–∏—Ö–æ–ª–æ–≥–∏—á–µ—Å–∫–æ–π –≥–∏–±–∫–æ—Å—Ç–∏."
    }
  ];
  
  // –î–∞–Ω–Ω—ã–µ –æ –ø—Ä–µ–∏–º—É—â–µ—Å—Ç–≤–∞—Ö –≤–µ—Ä—Å–∏–π
  const webBenefits = [
    "–†–∞—Å—à–∏—Ä–µ–Ω–Ω–∞—è –∞–Ω–∞–ª–∏—Ç–∏–∫–∞ –∏ –≥—Ä–∞—Ñ–∏–∫–∏",
    "–£–¥–æ–±–Ω—ã–π –±–æ–ª—å—à–æ–π —ç–∫—Ä–∞–Ω –¥–ª—è –¥–Ω–µ–≤–Ω–∏–∫–æ–≤—ã—Ö –∑–∞–ø–∏—Å–µ–π",
    "–†–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–µ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è",
    "–ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å –∫–∞–ª–µ–Ω–¥–∞—Ä–µ–º –∏ –∑–∞–º–µ—Ç–∫–∞–º–∏",
    "–ü–æ–ª–Ω–∞—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ –≤–≤–æ–¥–∞"
  ];
  
  const mobileBenefits = [
    "–î–æ—Å—Ç—É–ø –≤ –ª—é–±–æ–º –º–µ—Å—Ç–µ –∏ –≤ –ª—é–±–æ–µ –≤—Ä–µ–º—è",
    "–ú–≥–Ω–æ–≤–µ–Ω–Ω—ã–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –∏ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è",
    "–£–ø—Ä–æ—â–µ–Ω–Ω—ã–π –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å –¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è",
    "–í–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å –¥–µ–ª–∞—Ç—å —Ñ–æ—Ç–æ –∏ –∞—É–¥–∏–æ–∑–∞–ø–∏—Å–∏",
    "–û—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –∏ –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏—è"
  ];
  
  const handleToggleChange = () => {
    setIsMobile(!isMobile);
  };
  
  return (
    <Box py={16} position="relative" overflow="hidden">
      {/* –î–µ–∫–æ—Ä–∞—Ç–∏–≤–Ω—ã–µ —ç–ª–µ–º–µ–Ω—Ç—ã —Ñ–æ–Ω–∞ */}
      <Box
        position="absolute"
        top="-20%"
        right="-10%"
        width="500px"
        height="500px"
        bg={gradientStart}
        borderRadius="full"
        opacity="0.4"
        zIndex={-1}
      />
      <Box
        position="absolute"
        bottom="-30%"
        left="-15%"
        width="600px"
        height="600px"
        bg={gradientEnd}
        borderRadius="full"
        opacity="0.3"
        zIndex={-1}
      />
      
      <Container maxW="1200px">
        <VStack spacing={12} align="stretch">
          {/* –ó–∞–≥–æ–ª–æ–≤–æ–∫ —Å–µ–∫—Ü–∏–∏ */}
          <Box textAlign="center" maxW="800px" mx="auto">
            <Heading as="h2" size={headingSize} mb={4}>
              –ü–æ—Å–º–æ—Ç—Ä–∏—Ç–µ, –∫–∞–∫ –≤—ã–≥–ª—è–¥–∏—Ç –≤–∞—à –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–π –ø—Å–∏—Ö–æ–ª–æ–≥
            </Heading>
            <Text fontSize="lg" color="gray.600">
              –ò–Ω—Ç—É–∏—Ç–∏–≤–Ω–æ –ø–æ–Ω—è—Ç–Ω—ã–π –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å –∏ –ø—Ä–æ–¥—É–º–∞–Ω–Ω—ã–π –æ–ø—ã—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è ‚Äî 
              –º—ã —Å–¥–µ–ª–∞–ª–∏ –≤—Å—ë, —á—Ç–æ–±—ã –∑–∞–±–æ—Ç–∞ –æ –ø—Å–∏—Ö–∏—á–µ—Å–∫–æ–º –∑–¥–æ—Ä–æ–≤—å–µ –±—ã–ª–∞ –ø—Ä–æ—Å—Ç–æ–π –∏ –ø—Ä–∏—è—Ç–Ω–æ–π
            </Text>
          </Box>
          
          {/* –ü–µ—Ä–µ–∫–ª—é—á–∞—Ç–µ–ª—å –≤–µ–±/–º–æ–±–∏–ª—å–Ω–æ–π –≤–µ—Ä—Å–∏–∏ */}
          <Flex justify="center" mb={6}>
            <HStack spacing={4}>
              <Text 
                fontWeight={!isMobile ? "bold" : "normal"}
                color={!isMobile ? "blue.500" : "gray.500"}
              >
                –í–µ–±-–≤–µ—Ä—Å–∏—è
              </Text>
              <Switch 
                colorScheme="blue" 
                size="lg" 
                isChecked={isMobile} 
                onChange={handleToggleChange}
              />
              <Text 
                fontWeight={isMobile ? "bold" : "normal"}
                color={isMobile ? "blue.500" : "gray.500"}
              >
                –ú–æ–±–∏–ª—å–Ω–∞—è –≤–µ—Ä—Å–∏—è
              </Text>
            </HStack>
          </Flex>
          
          {/* –ö–æ–Ω—Ç–µ–π–Ω–µ—Ä –¥–ª—è –¥–µ–º–æ-–∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞ */}
          <Flex justify="center" mb={8}>
            <Box
              width={previewWidth}
              height={previewHeight}
              bg={glassBg}
              backdropFilter="blur(10px)"
              borderRadius={isMobile ? "24px" : "lg"}
              boxShadow="xl"
              border="1px solid"
              borderColor={borderColor}
              position="relative"
              overflow="hidden"
              transition="all 0.5s ease"
            >
              {/* –§–æ–Ω–æ–≤—ã–π –≥—Ä–∞–¥–∏–µ–Ω—Ç */}
              <Box
                position="absolute"
                top={0}
                left={0}
                right={0}
                bottom={0}
                bgGradient={`linear(to-br, ${gradientStart}, ${gradientEnd})`}
                opacity={0.15}
                zIndex={0}
              />
              
              {/* –ü–ª–∞—à–∫–∞ "–í —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ" */}
              <VStack
                position="absolute"
                top="50%"
                left="50%"
                transform="translate(-50%, -50%)"
                spacing={4}
                textAlign="center"
                zIndex={1}
                animation={`${pulseAnimation} 3s infinite ease-in-out`}
              >
                <Text fontSize="6xl">üöß</Text>
                <Heading size="lg">–í —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ</Heading>
                <Text>–ò–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—ã–π –¥–∞—à–±–æ—Ä–¥ —Å–∫–æ—Ä–æ –±—É–¥–µ—Ç –¥–æ—Å—Ç—É–ø–µ–Ω</Text>
                <Spinner size="xl" color="blue.500" thickness="4px" speed="0.8s" mt={4} />
                <Badge colorScheme="blue" fontSize="md" mt={2}>
                  {isMobile ? "–ú–æ–±–∏–ª—å–Ω–∞—è –≤–µ—Ä—Å–∏—è" : "–í–µ–±-–≤–µ—Ä—Å–∏—è"}
                </Badge>
              </VStack>
              
              {/* –í–∏–∑—É–∞–ª—å–Ω–∞—è —Ä–∞–º–∫–∞ –º–æ–±–∏–ª—å–Ω–æ–≥–æ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞ */}
              {isMobile && (
                <>
                  <Box 
                    position="absolute" 
                    top="12px" 
                    left="50%" 
                    transform="translateX(-50%)" 
                    width="40%" 
                    height="20px" 
                    bg="black" 
                    borderRadius="full"
                    zIndex={2}
                  />
                  <Box 
                    position="absolute"
                    bottom="20px"
                    left="50%"
                    transform="translateX(-50%)"
                    width="30%"
                    height="4px"
                    bg="black"
                    borderRadius="full"
                    zIndex={2}
                  />
                </>
              )}
              
              {/* –•–µ–¥–µ—Ä –≤ –≤–µ–±-–≤–µ—Ä—Å–∏–∏ */}
              {!isMobile && (
                <Box 
                  position="absolute" 
                  top={0} 
                  left={0} 
                  right={0} 
                  height="60px" 
                  bg="white" 
                  borderBottom="1px solid" 
                  borderColor="gray.200"
                  display="flex"
                  alignItems="center"
                  px={4}
                  zIndex={2}
                >
                  <Text fontWeight="bold" fontSize="lg">PsyBalans</Text>
                  <Box flex="1" />
                  <HStack spacing={4}>
                    <Box w="40px" h="10px" bg="gray.200" borderRadius="full" />
                    <Box w="40px" h="10px" bg="gray.200" borderRadius="full" />
                    <Box w="40px" h="10px" bg="gray.200" borderRadius="full" />
                  </HStack>
                </Box>
              )}
            </Box>
          </Flex>
          
          {/* –û–ø–∏—Å–∞–Ω–∏–µ —Ñ—É–Ω–∫—Ü–∏–π */}
          <SimpleGrid columns={{ base: 1, md: 2 }} spacing={8}>
            {features.map((feature, index) => (
              <FeatureBlock
                key={index}
                icon={feature.icon}
                title={feature.title}
                description={feature.description}
              />
            ))}
          </SimpleGrid>
          
          {/* –°—Ä–∞–≤–Ω–µ–Ω–∏–µ –≤–µ–± –∏ –º–æ–±–∏–ª—å–Ω–æ–π –≤–µ—Ä—Å–∏–π */}
          <Heading as="h3" size="lg" textAlign="center" mt={8} mb={6}>
            –í—ã–±–µ—Ä–∏—Ç–µ —É–¥–æ–±–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç
          </Heading>
          
          <SimpleGrid columns={{ base: 1, md: 2 }} spacing={8}>
            <VersionComparison
              title="–í–ï–ë-–í–ï–†–°–ò–Ø"
              icon="üíª"
              benefits={webBenefits}
            />
            <VersionComparison
              title="–ú–û–ë–ò–õ–¨–ù–ê–Ø –í–ï–†–°–ò–Ø"
              icon="üì±"
              benefits={mobileBenefits}
            />
          </SimpleGrid>
          
          {/* –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –±–µ—Ç–∞-—Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ */}
          <Box
            mt={10}
            p={6}
            bg={glassBg}
            backdropFilter="blur(10px)"
            borderRadius="lg"
            boxShadow="md"
            border="1px solid"
            borderColor={borderColor}
            textAlign="center"
          >
            <Badge colorScheme="purple" fontSize="md" mb={3}>
              –°–∫–æ—Ä–æ –∑–∞–ø—É—Å–∫
            </Badge>
            <Heading as="h3" size="md" mb={3}>
              –•–æ—Ç–∏—Ç–µ –ø—Ä–æ—Ç–µ—Å—Ç–∏—Ä–æ–≤–∞—Ç—å –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –ø–µ—Ä–≤—ã–º–∏?
            </Heading>
            <Text>
              –ó–∞–ø–∏—à–∏—Ç–µ—Å—å –≤ —Å–ø–∏—Å–æ–∫ –æ–∂–∏–¥–∞–Ω–∏—è, —á—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å —Ä–∞–Ω–Ω–∏–π –¥–æ—Å—Ç—É–ø –∫ –±–µ—Ç–∞-–≤–µ—Ä—Å–∏–∏ 
              –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è PsyBalans –∏ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å –≤–ª–∏—è—Ç—å –Ω–∞ –µ–≥–æ —Ä–∞–∑–≤–∏—Ç–∏–µ.
            </Text>
          </Box>
        </VStack>
      </Container>
    </Box>
  );
};

export default AppPreview;